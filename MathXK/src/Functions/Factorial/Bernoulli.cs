//  Copyright (c) 2013 Rocco Romeo
//  Use, modification and distribution are subject to the
//  Boost Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

//  Ported to .NET based on the original:
//      Copyright (C) 2013 Nikhar Agrawal, Christopher Kormanyos, John Maddock, Paul Bristow, Boost Software License, Version 1.0



namespace MathXK
{

    public static partial class Math2
    {

        // BernoulliTable
        // Table[N[BernoulliB[2*k], 50], {k, 0, 129}]

        /// <summary>
        /// Tabulated Bernoulli numbers: B{2n}, n=0..129 
        /// </summary>
        public static readonly double[] Bernoulli2nTable = {
            1.0000000000000000000000000000000000000000000000000, 
            0.16666666666666666666666666666666666666666666666667, 
            -0.033333333333333333333333333333333333333333333333333, 
            0.023809523809523809523809523809523809523809523809524, 
            -0.033333333333333333333333333333333333333333333333333, 
            0.075757575757575757575757575757575757575757575757576, 
            -0.25311355311355311355311355311355311355311355311355, 
            1.1666666666666666666666666666666666666666666666667, 
            -7.0921568627450980392156862745098039215686274509804, 
            54.971177944862155388471177944862155388471177944862, 
            -529.12424242424242424242424242424242424242424242424, 
            6192.1231884057971014492753623188405797101449275362, 
            -86580.253113553113553113553113553113553113553113553, 
             1.4255171666666666666666666666666666666666666666667e6, 
            -2.7298231067816091954022988505747126436781609195402e7, 
             6.0158087390064236838430386817483591677140064236838e8, 
            -1.5116315767092156862745098039215686274509803921569e10, 
             4.2961464306116666666666666666666666666666666666667e11, 
            -1.3711655205088332772159087948561632772159087948562e13, 
             4.8833231897359316666666666666666666666666666666667e14, 
            -1.9296579341940068148632668144863266814486326681449e16, 
             8.4169304757368261500055370985603543743078626799557e17, 
            -4.0338071854059455413076811594202898550724637681159e19, 
             2.1150748638081991605601453900709219858156028368794e21, 
            -1.2086626522296525934602731193708252531781943546649e23, 
             7.5008667460769643668557200757575757575757575757576e24, 
            -5.0387781014810689141378930305220125786163522012579e26, 
             3.6528776484818123335110430842971177944862155388471e28, 
            -2.8498769302450882226269146432910678160919540229885e30, 
             2.3865427499683627644645981919219214971751412429379e32, 
            -2.1399949257225333665810744765191097392674151161724e34, 
             2.0500975723478097569921733095672310251666666666667e36, 
            -2.0938005911346378409095185290027970184709215686275e38, 
             2.2752696488463515559649260352769264581469965405890e40, 
            -2.6257710286239576047303049736158202081449000333333e42, 
             3.2125082102718032518204792304264985243521941106167e44, 
            -4.1598278166794710913917074495262358936689603011346e46, 
             5.6920695482035280023883456219121058644480512971812e48, 
            -8.2183629419784575692290653468617333014550892762886e50, 
             1.2502904327166993016732339829702895524177196364448e53, 
            -2.0015583233248370274925329198813298768724220132826e55, 
             3.3674982915364374233396676903338753016219598947194e57, 
            -5.9470970503135447718660496844051540840579071565107e59, 
             1.1011910323627977559564130790437691604630511444223e62, 
            -2.1355259545253501188658385019041065678973298739163e64, 
             4.3328896986641192419616613059379206218451368511809e66, 
            -9.1885528241669328226200555215501897138960388916272e68, 
             2.0346896776329074493455027990220020065975140253378e71, 
            -4.7003833958035731078575255535006060654596737369759e73, 
             1.1318043445484249270675186257733934267890365954751e76, 
            -2.8382249570693706959264156336481764738284680928013e78, 
             7.4064248979678850629750827140920984176879731788089e80, 
            -2.0096454802756604483465619672715363186867270822533e83, 
             5.6657170050805941445719346030519356961419468287510e85, 
            -1.6584511154136216915823713374319912301494962614725e88, 
             5.0368859950492377419289421915180154812442374264903e90, 
            -1.5861468237658186369363401572966438782740978412779e93, 
             5.1756743617545626984073240682507122561240849235931e95, 
            -1.7488921840217117339690025877618159145141476161827e98, 
             6.1160519994952185255824525264264167780767726846783e100, 
            -2.2122776912707834942288323456712932445573185054988e103, 
             8.2722776798770969854221062459984595731204650518434e105, 
            -3.1958925111415709583591634369180814873526276671099e108, 
             1.2750082223387792982310024302926679866957191796390e111, 
            -5.2500923086774133899402824624565175446919894037755e113, 
             2.2301817894241625209869298198838728143738272150876e116, 
            -9.7684521930955204438633513398980239301166902674986e118, 
             4.4098361978452954272272622874813169191875754265528e121, 
            -2.0508570886464088839729337727583015486456596690401e124, 
             9.8214433279791277107572969602097521041491857990724e126, 
            -4.8412600798208880508789196709963412761130549942325e129, 
             2.4553088801480982609783467404088690399673695039984e132, 
            -1.2806926804084747548782513278601785721811834171196e135, 
             6.8676167104668581192101888598464400436092426813476e137, 
            -3.7846468581969104694978995416379556814489549265040e140, 
             2.1426101250665291550871323135148272096660152602965e143, 
            -1.2456727137183695007019642961637607219458298438296e146, 
             7.4345787551000152543679668394052061311780714872903e148, 
            -4.5535795304641704894063333223321274876772114534277e151, 
             2.8612112816858868345363847251017232522918987045672e154, 
            -1.8437723552033869727688202653628785487541402926335e157, 
             1.2181154536221046699501316506599521355817430663167e160, 
            -8.2482187185314121548481845729689344730141891659232e162, 
             5.7225877937832943329651649814297861591868486612327e165, 
            -4.0668530525059104726767969383115865560219572121764e168, 
             2.9596092064642050062875269581585187042637929901665e171, 
            -2.2049522565189457509031175227344598483637854539562e174, 
             1.6812597072889599805831152515136066575446385464821e177, 
            -1.3116736213556957648645280635581715300443123600071e180, 
             1.0467894009478038082183285392982308964382872138854e183, 
            -8.5432893578833707718598254629908277459327010789873e185, 
             7.1287821322486542352288406677143822472124468930473e188, 
            -6.0802931455535899300084711868647745846198816009270e191, 
             5.2996776424849923930094291004324726622848971234560e194, 
            -4.7194259168745862644364622901337991110376078775725e197, 
             4.2928413791402981089416829654107466904552098101212e200, 
            -3.9876744968232207443447765554293879510665147856001e203, 
             3.7819780419358882713894418116139332789822023821626e206, 
            -3.6614233683681191243685808215119734875519606834303e209, 
             3.6176090272372862348855460929891408947754147596882e212, 
            -3.6470772645191354362138308865549944904868234686191e215, 
             3.7508755436454409098345241010481418930684174075854e218, 
            -3.9345867296439028269489128853371342935565714036609e221, 
             4.2088211148190082004657117111149489824273137489831e224, 
            -4.5902296220617918655980294057332559105937091736636e227, 
             5.1031725772629575927919818510649676853975996289216e230, 
            -5.7822762303656955401537727124291714251219952038526e233, 
             6.6762482167835881032263779441280936345107953790810e236, 
            -7.8535307644450416322591625963931244442822957000240e239, 
             9.4106894067058725524544328825876248529394779681195e242, 
            -1.1484933873465183993849859920680559254835379696471e246, 
             1.4272958742848785677141632008712249989717991300397e249, 
            -1.8059559586909309014228572811765456092671939480952e252, 
             2.3261535307660805216129798518470887616173638331727e255, 
            -3.0495751715499594768194281926154259378532703731008e258, 
             4.0685806076433973442401212412493731863368431075452e261, 
            -5.5231031321974361625232004409318639232427951444627e264, 
             7.6277279396434392486994969020496121553385863373331e267, 
            -1.0715571119697886313279352400106539693266687611581e271, 
             1.5310200895969188445344091615335533435584735372675e274, 
            -2.2244891682179834667660234886504851082483512780169e277, 
             3.2862679190690139166818973643689527536518279003983e280, 
            -4.9355928955960344902071193819157596349699881996772e283, 
             7.5349571200832506721226604977928395672782441082405e286, 
            -1.1691485154584177727808892473165504178389953711166e290, 
             1.8435261467838939412664620159770223239649247700003e293, 
            -2.9536826172968082972801491735052518348520730637419e296, 
             4.8079321277501569766887870404326407222796703064087e299, 
            -7.9502125045885252853824363167115869303679810400161e302, 
             1.3352784187354633875012283201782051829203925300587e306
        };

        /// <summary>
        /// Returns the nth Bernoulli number B{n}
        /// </summary>
        /// <param name="n">The Bernoulli number requested. Requires n &gt;= 0</param>
        /// <returns></returns>
        public static double BernoulliB(int n)
        {
            if (n < 0) {
                Policies.ReportDomainError("BernoulliB(n: {0}): Requires n >= 0", n);
                return double.NaN;
            }
            if (n >= 2*Bernoulli2nTable.Length) 
                return double.PositiveInfinity;

            if ( n == 1 )
                return -0.5;

            if ( IsOdd(n) )
                return 0;

            return Bernoulli2nTable[n*2];
        }
    }
}