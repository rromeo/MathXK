//  Copyright (c) 2013 Rocco Romeo
//  Use, modification and distribution are subject to the
//  Boost Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

//#define EXTRA_DEBUG

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using MathXK.Numerics;

namespace MathXK
{
    internal static class Debye
    {
        #region Debye Polynomials

        /// <summary>
        /// First 16 terms of the Debye U polynomials (U[0], U[15])
        /// <para>all lines are U[k,n]*p^(2*k+n)</para>
        /// <para>When p in [0,1], the |maxima| occurs at p=0</para>
        /// </summary>
        public static readonly double[][] U = {
            new double[] {
                1.0000000000000000000000000000000000000000000000000}, 
            new double[] {
                0.12500000000000000000000000000000000000000000000000, 
                -0.20833333333333333333333333333333333333333333333333}, 
            new double[] {
                0.07031250000000000000000000000000000000000000000000, 
                -0.40104166666666666666666666666666666666666666666667, 
                0.33420138888888888888888888888888888888888888888889}, 
            new double[] {
                0.07324218750000000000000000000000000000000000000000, 
                -0.8912109375000000000000000000000000000000000000000, 
                1.8464626736111111111111111111111111111111111111111, 
                -1.0258125964506172839506172839506172839506172839506}, 
            new double[] {
                0.11215209960937500000000000000000000000000000000000, 
                -2.3640869140625000000000000000000000000000000000000, 
                8.789123535156250000000000000000000000000000000000, 
                -11.207002616222993827160493827160493827160493827160, 
                4.6695844234262474279835390946502057613168724279835}, 
            new double[] {
                0.22710800170898437500000000000000000000000000000000, 
                -7.368794359479631696428571428571428571428571428571, 
                42.534998745388454861111111111111111111111111111111, 
                -91.81824154324001736111111111111111111111111111111, 
                84.63621767460073463220164609053497942386831275720, 
                -28.212072558200244877400548696844993141289437585734}, 
            new double[] {
                0.5725014209747314453125000000000000000000000000000, 
                -26.491430486951555524553571428571428571428571428571, 
                218.19051174421159047929067460317460317460317460317, 
                -699.5796273761325412326388888888888888888888888889, 
                1059.9904525279998779296875000000000000000000000000, 
                -765.2524681411816422994898834019204389574759945130, 
                212.57013003921712286096941205608901082152110958695}, 
            new double[] {
                1.7277275025844573974609375000000000000000000000000, 
                -108.09091978839465550013950892857142857142857142857, 
                1200.9029132163524627685546875000000000000000000000, 
                -5305.646978613403108384874131944444444444444444444, 
                11655.393336864533247771086516203703703703703703704, 
                -13586.550006434137438550407503858024691358024691358, 
                8061.722181737309384502264952227175735406188081085, 
                -1919.4576623184069963100630838636132703348066859727}, 
            new double[] {
                6.074042001273483037948608398437500000000000000000, 
                -493.91530477308801242283412388392857142857142857143, 
                7109.514302489363721438816615513392857142857142857, 
                -41192.654968897551298141479492187500000000000000000, 
                122200.46498301745978770432648835358796296296296296, 
                -203400.17728041553427816581987713263031550068587106, 
                192547.00123253153235905782021939836248285322359396, 
                -96980.59838863751348856593731220906048366610780877, 
                20204.291330966148643451236940043554267430439126827}, 
            new double[] {
                24.380529699556063860654830932617187500000000000000, 
                -2499.8304818112096241251988844438032670454545454545, 
                45218.768981362726273281233651297433035714285714286, 
                -331645.17248456357783150105249314081101190476190476, 
                1.2683652733216247816259662310282389322916666666667e6, 
                -2.8135632265865341107078683556189098802940672153635e6, 
                3.7632712976564039964021056222763026638231595793324e6, 
                -2.9980159185381067500913462030544202514146090534979e6, 
                1.3117636146629772006760715583323277608129212603092e6, 
                -242919.18790055133345853177006154217792831875190912}, 
            new double[] {
                110.01714026924673817120492458343505859375000000000, 
                -13886.089753717040531972253864461725408380681818182, 
                308186.40461266239848039078427710205814170483534323, 
                -2.7856181280864546889594445625940958658854166666667e6, 
                1.3288767166421818329437411631698961611147280092593e7, 
                -3.7567176660763351308163197964061925440658757716049e7, 
                6.634451227472902666479879845432838349239870899063e7, 
                -7.410514821153265774833562096441469801542435890108e7, 
                5.095260249266464220638182198049918196401551009278e7, 
                -1.9706819118432226926823389846242609184434858748627e7, 
                3.2844698530720378211372316410404348640724764581045e6}, 
            new double[] {
                551.3358961220205856079701334238052368164062500000, 
                -84005.43360302408528867828125668155563461197006119, 
                2.2437681779224494292307377802398131818187480070153e6, 
                -2.4474062725738728467813008156015860791109046157526e7, 
                1.4206290779753309518565327851791624669675473813657e8, 
                -4.9588978427503030925463624537425846089201068822108e8, 
                1.1068428168230144682596666690962458098376238787616e9, 
                -1.6210805521083370752481758826367688776788651952291e9, 
                1.5535968995705800561581210443879961707545214255405e9, 
                -9.394623596815784025462443009203890773858608278646e8, 
                3.2557307418576574902022808641813310590118422890961e8, 
                -4.9329253664509961972761831275474713015330943774184e7}, 
            new double[] {
                3038.0905109223842686105854227207601070404052734375, 
                -549842.3275722886871349019329372949741937063790701, 
                1.7395107553978164538104396314236741639015523856898e7, 
                -2.2510566188941527780407142696305296369015224396236e8, 
                1.5592798648792575133496462047419516325351737794422e9, 
                -6.563293792619284332035016850974712726703326468044e9, 
                1.7954213731155600080152205853828038246844087234787e10, 
                -3.3026599749800723140090992675778543543382273125877e10, 
                4.1280185579753973955131471027097433564382340111061e10, 
                -3.4632043388158777922902413335595508135327514865314e10, 
                1.8688207509295824922365919302791626945175956647324e10, 
                -5.866481492051847227610700784435830245348232488345e9, 
                8.147890961183121149459306645049764229650322900479e8}, 
            new double[] {
                18257.755474293174691169383550004567950963973999023, 
                -3.8718334425726126206266266669311468697875946551770e6, 
                1.4315787671888898129105727011782943334699472415391e8, 
                -2.1671649832237950935184161277112011107437919514062e9, 
                1.7634730606834969383151973957584357382199929031745e10, 
                -8.786707217802326567663590419006898931305234630903e10, 
                2.8790064990615058872291329205720180696526744156381e11, 
                -6.453648692453765032808836899474691858352541655525e11, 
                1.0081581068653820947691251648300281969622244402332e12, 
                -1.0983751560812233068270645354151962188504479007258e12, 
                8.192186695485773286413033254921621727270530805906e11, 
                -3.9909617522446649795523462324185512374006107300092e11, 
                1.1449823773202580995277690662956181183716116255898e11, 
                -1.4679261247695616660612423926866898953482200328074e10}, 
            new double[] {
                118838.42625678325312377214828529758960939943790436, 
                -2.9188388122220813403427320319938952853444025858299e7, 
                1.2470092935127103248258683738052871541929727589542e9, 
                -2.1822927757529223729398775649747337912249720978494e10, 
                2.0591450323241001568908172553264296058184663569435e11, 
                -1.1965528801961815989741606860632311649060348415094e12, 
                4.6127257808491319668038160335787368620194571615875e12, 
                -1.2320491305598287159787700653176541766469727787423e13, 
                2.3348364044581840937657467802720273590253762681957e13, 
                -3.1667088584785158402552567885688002346585999852842e13, 
                3.0565125519935320611720036882800953063012800984319e13, 
                -2.0516899410934437390760477969195858105681386713080e13, 
                9.109341185239898955907876541296591202302160372119e12, 
                -2.4062979000285039610908915922116564109495696887796e12, 
                2.8646403571767904298701090383472100130352020104519e11}, 
            new double[] {
                832859.3040162892989757698058994606071792077273130, 
                -2.3455796352225152477626324834060698125482896633648e8, 
                1.1465754899448237156922358959540023523185755674877e10, 
                -2.2961937296824646816595347732314223597263405142965e11, 
                2.4850009280340853236474523656379664870996748504695e12, 
                -1.6634824724892480518656925060186478775111807430850e13, 
                7.437312290867914494114728953717075546608160949213e13, 
                -2.3260483118893992523217486060177563904922812787281e14, 
                5.230548825784446555790535196170039264167318324856e14, 
                -8.574610329828950513961987089197639950745531000463e14, 
                1.0269551960827624888137405805940215287765791243798e15, 
                -8.894969398810264418128257191774092176472013120001e14, 
                5.427396649876597227020591239685814347771941780786e14, 
                -2.2134963870252519596559379794075462512499603953960e14, 
                5.417751075510604900491843718774160937152825802267e13, 
                -6.019723417234005444990937465304623263503139780297e12}
                                        };

        /// <summary>
        /// First 16 terms of the Debye V polynomials (V[0], V[15])
        /// <para>all lines are V[k,n]*p^(2*k+n)</para>
        /// <para>When p in [0,1], the |maxima| occurs at p=0</para>
        /// </summary>
        public static readonly double[][] V = {
            new double[] {
                1.0000000000000000000000000000000000000000000000000}, 
            new double[] {
                -0.37500000000000000000000000000000000000000000000000, 
                0.29166666666666666666666666666666666666666666666667}, 
            new double[] {
                -0.11718750000000000000000000000000000000000000000000, 
                0.5156250000000000000000000000000000000000000000000, 
                -0.39496527777777777777777777777777777777777777777778}, 
            new double[] {
                -0.10253906250000000000000000000000000000000000000000, 
                1.0892578125000000000000000000000000000000000000000, 
                -2.1305338541666666666666666666666666666666666666667, 
                1.1464964313271604938271604938271604938271604938272}, 
            new double[] {
                -0.14419555664062500000000000000000000000000000000000, 
                2.7939208984375000000000000000000000000000000000000, 
                -9.961006673177083333333333333333333333333333333333, 
                12.386687102141203703703703703703703703703703703704, 
                -5.075635242854616769547325102880658436213991769547}, 
            new double[] {
                -0.27757644653320312500000000000000000000000000000000, 
                8.502455030168805803571428571428571428571428571429, 
                -47.539116244845920138888888888888888888888888888889, 
                100.56283597592954282407407407407407407407407407407, 
                -91.40711508856879340277777777777777777777777777778, 
                30.157732734627847972393689986282578875171467764060}, 
            new double[] {
                -0.6765925884246826171875000000000000000000000000000, 
                30.023621218545096261160714285714285714285714285714, 
                -241.15793403307596842447916666666666666666666666667, 
                760.4126384523179796006944444444444444444444444444, 
                -1138.5082638263702392578125000000000000000000000000, 
                814.6235951180320708349408436213991769547325102881, 
                -224.71699461288667273873909274500838286846517299192}, 
            new double[] {
                -1.9935317337512969970703125000000000000000000000000, 
                120.80749858702932085309709821428571428571428571429, 
                -1315.2746192369574592227027529761904761904761904762, 
                5730.098736902475357055664062500000000000000000000, 
                -12459.213566993121747617368344907407407407407407407, 
                14409.977279551357889371644322273662551440329218107, 
                -8497.490948317704486367252246942158207590306355738, 
                2013.0897434071097766178710391740334298633338413860}, 
            new double[] {
                -6.883914268109947443008422851562500000000000000000, 
                545.9063894860446453094482421875000000000000000000, 
                -7727.732937488438827650887625558035714285714285714, 
                44243.962744371443986892700195312500000000000000000, 
                -130084.36594966374751594331529405381944444444444444, 
                215023.04455358213623691815244154020919067215363512, 
                -202421.20642394340581336847766654699645633287608596, 
                101491.32389508576992989458555928855166895290352080, 
                -21064.048408879601777215119363024131044767904621585}, 
            new double[] {
                -27.248827311268541961908340454101562500000000000000, 
                2737.9095753170391121371225877241654829545454545455, 
                -48836.270499871744375143732343401227678571428571429, 
                354517.25334556796250953560783749534970238095238095, 
                -1.3452358959471777986942066086663140190972222222222e6, 
                2.9656477253209413599353206991658779819315843621399e6, 
                -3.9468455072981798011046473599483174279120941929584e6, 
                3.1312610704731337167620727009679500403663694558756e6, 
                -1.3653049866900374945812173362234431796216119239953e6, 
                252085.94970811930830602353496952490162372700669814}, 
            new double[] {
                -121.59789187653586850501596927642822265625000000000, 
                15093.575819257652752143754200501875443892045454545, 
                -331015.02717656331688634565718651702541146074907236, 
                2.9653354266726775721181184053421020507812500000000e6, 
                -1.4048125290217350805405263724938902274641410383598e7, 
                3.9493698540802497529094644013500998540179719650206e7, 
                -6.943030354332107441664990535918086644553353266461e7, 
                7.725855877372553680145628568630468516501688481177e7, 
                -5.295074376688678503800463852875405184495729480230e7, 
                2.0423430722738853360526058567924158609323399066759e7, 
                -3.3958078141931238489723920356519750289562892193962e6}, 
            new double[] {
                -603.8440767050701651896815747022628784179687500000, 
                90725.86829126601211177254375721608008538092766608, 
                -2.3985108108826183553845817650839382288407306281888e6, 
                2.5957339254571378677983493498804700839055048954951e7, 
                -1.4974198389469704627676967195131712489657931857639e8, 
                5.200795298494220316573014280754418004477185266709e8, 
                -1.1560358309040373335156518543894122902748516067065e9, 
                1.6872471052556161395440197962137798522780025501365e9, 
                -1.6122231976675830771452199517233922526697863849948e9, 
                9.724259512493530833373405921807536064169436639300e8, 
                -3.3624760120824987193892408925151451920941977739845e8, 
                5.084707685418719157192373377625855033887958819800e7}, 
            new double[] {
                -3302.2722944808524658810711116530001163482666015625, 
                590571.3888739397009967465205622797870969438886309, 
                -1.8517372557460626766369196076445563680242331847665e7, 
                2.3796884256881043653573265136094170447244665790307e8, 
                -1.6392429348730655909573203690876927418959519219777e9, 
                6.868563271345762673059901355671210993061620722372e9, 
                -1.8718222826098391572924640145480295193518303712863e10, 
                3.4321760524302712282839659055220839368612950503363e10, 
                -4.2781283237199573008045342700810067512178061569645e10, 
                3.5806010960638736496560122262225864343304718759054e10, 
                -1.9281483938162359046885472296531043673594240985334e10, 
                6.041600342560857592614005285463765476552657338743e9, 
                -8.377409016427716111415906832234264630485543263873e8}, 
            new double[] {
                -19718.375912236628666462934234004933387041091918945, 
                4.1388564386121031461870836784436397573591529072581e6, 
                -1.5183411167154891955112134709466758082257016198142e8, 
                2.2843090363710272607356278102901849545677807055363e9, 
                -1.8494961368143992279891094638442130913038949960123e10, 
                9.177227538593541081781972215407205550474356170054e10, 
                -2.9965169684109551071160363050851616643323754121947e11, 
                6.697182605376548618952566593794491551120562095356e11, 
                -1.0435320755273253261645330653503800635223024907677e12, 
                1.1343874562806076775427059955927436358619379958315e12, 
                -8.444253978423797079841126585842287011186547138395e11, 
                4.1066418030343654137422693116190889544267153888501e11, 
                -1.1763517575208131159531873968790597106557653687566e11, 
                1.5060540760622775534914045327564740484741478258674e10}, 
            new double[] {
                -127641.27264617460520701452963976407772861421108246, 
                3.1071509936557640074616179695418885295601704945931e7, 
                -1.3182669674277223433873465665941607058611426308945e9, 
                2.2942052257915337766803841067683098830826629746621e10, 
                -2.1549192198740583037229482904578914479495578154060e11, 
                1.2474700240343169861645505024914537676679937709353e12, 
                -4.7936169879412547890314166623465304644515927365517e12, 
                1.2768509171256406692870889767837506921614081525147e13, 
                -2.4139834012194784698256026033320960830601347857616e13, 
                3.2672392984302147558189157342376510357588730006901e13, 
                -3.1477517326500554062816157386765160617132586088328e13, 
                2.1094840239411463796134012559877431573447059578237e13, 
                -9.352256950179629594732086582397833634363551315375e12, 
                2.4672168342064407702324331515081540416065208201411e12, 
                -2.9336678356629781510717984127652150735902671191375e11}, 
            new double[] {
                -890297.8767070678713189263442373544421570841223001, 
                2.4877359767511525355058223308852255587633375217506e8, 
                -1.2085525434553547273512756741136781551466066792438e10, 
                2.4082031799108775929599998841207600358105522467012e11, 
                -2.5954454137244891158095613596663205531929937327125e12, 
                1.7313797162643194009214350572847151378177595489252e13, 
                -7.717965584862930135402077216121493491763185890692e13, 
                2.4076640421311325594207573290359232813867472885080e14, 
                -5.402042229908526770734487169814958584303951712556e14, 
                8.838444493823687452853125153480644256922316569708e14, 
                -1.0567220133605237203735591481474714281614075047966e15, 
                9.138667190558490840542729991548724838841109369864e14, 
                -5.568367991431833518631515687469861473688096112754e14, 
                2.2681506188036532426104055838373622080709470718255e14, 
                -5.545227571404972074621063570980611782732892291732e13, 
                6.154998100767353881957025947671019291896468764124e12}                                        
                                        };
        #endregion



        public static double EvalU(int k, double x)
        {
            double xk = Math.Pow(x, k);
            return xk * Polynomial.Eval(U[k], x);
        }

        public static double EvalV(int k, double x)
        {
            double xk = Math.Pow(x, k);
            return xk * Polynomial.Eval(V[k], x);
        }


    };

    /// <summary>
    /// Uniform Bessel Asymptotics
    /// </summary>
    internal static class UniformAsym
    {

        // For u and v, see: http://dlmf.nist.gov/9.7#i
        // For Zeta, see: http://dlmf.nist.gov/10.20#i
        // For U and V, see: http://dlmf.nist.gov/10.41#ii
        // See also: 
        // Numerical Algorithms for Uniform Airy-type Asymptotic Expansions, N. M. Temme, 1997
        // http://oai.cwi.nl/oai/asset/2178/2178A.pdf


        // Below are the Mathematica equations that are relevant
        // for computing the uniform bessel asymptotics

        /*
            (* For all Bessel functions *)
            u[k_] := If[k == 0, 1, Product[i, {i, 2*k + 1, 6*k - 1, 2}]/(216^k*Factorial[k])];         
            v[k_] := (6*k + 1)/(1 - 6*k) * u[k];
        
            lambda[k_] := If[k == 0, 1, Product[i, {i, 2*k + 1, 6*k - 1, 2}]/(144^k*Factorial[k])];
            mu[k_] := (6*k + 1)/(1 - 6*k)*lambda[k];
        
            U[0, p_] := 1; 
            U[k_, p_] := 
             U[k, p] = 
              Factor[Simplify[
                1/2*p^2*(1 - p^2)*D[U[k - 1, p], p] + 
                 1/8*Integrate[(1 - 5*t^2)*U[k - 1, t], {t, 0, p}]]];
          
            V[0, p_] := 1; 
            V[k_, p_] := 
             V[k, p] = 
              Factor[Simplify[
                U[k, p] - 1/2*p*(1 - p^2)*U[k - 1, p] - 
                 p^2*(1 - p^2)*D[U[k - 1, p], p]]];
         
            UK[k_, z_] := Function[p, Evaluate[U[k, p]]][z];
         
            (* Debye U and V polynomials       
            CoefficientList[Expand[Table[N[U[k, p], 50]/(p^k), {k, 0, 15} ]], p^2]
            CoefficientList[Expand[Table[N[V[k, p], 50]/(p^k), {k, 0, 15} ]], p^2]
            *)

            (* For Bessel J, Y *)
            ZetaStarLE1[z_] := Log[(1 + Sqrt[1 - z*z])/z] - Sqrt[1 - z*z];
            ZetaStarGE1[z_] := Sqrt[z*z - 1] - ArcSec[z];
         
            ZetaLE1[z_] := ((3/2)*ZetaStarLE1[z])^(2/3);
            ZetaGE1[z_] := -((3/2)*ZetaStarGE1[z])^(2/3);
        
            ALE1[k_, z_] := Sum[v[j] * ZetaStarLE1[z]^(-j) * Simplify[UK[2*k - j, 1/Sqrt[1 - z*z]]], {j, 0, 2*k}];
            BLE1[k_, z_] := -1/Sqrt[ZetaLE1[z]] * Sum[u[j] * ZetaStarLE1[z]^(-j) * Simplify[UK[2*k - j + 1, 1/Sqrt[1 - z*z]]], {j, 0, 2*k + 1}];
            BLE1Star[k_, z_] := Sum[u[j]*ZetaStarLE1[z]^(-j)* Simplify[UK[2*k - j + 1, 1/Sqrt[1 - z*z]]], {j, 0, 2*k + 1}];         
         
            AGE1[k_, z_] := Sum[(3/2)^j * v[j]*(I^(3*j))*(-ZetaGE1[z])^(-3*j/2)* Simplify[UK[2*k - j, I/Sqrt[z*z - 1]]], {j, 0, 2*k}];         
            BGE1[k_, z_] := -I/Sqrt[-ZetaGE1[z]] * Sum[(3/2)^j * u[j]*(I^(3*j))*(-ZetaGE1[z])^(-3*j/2) * Simplify[UK[2*k - j + 1, I/Sqrt[z*z - 1]]], {j, 0, 2*k + 1}];         
          
            PhiLE1[z_] := (4*ZetaLE1[z]/(1 - z*z))^(1/4);
            PhiGE1[z_] := (4*ZetaGE1[z]/(1 - z*z))^(1/4);          
         
            (* Find the Taylor series at z=1       
            Assuming[z >= 1 , Simplify[Series[ AGE1[k, z], {z, 1, 13}]]       
            Assuming[z >= 1 , Simplify[Series[ BGE1[k, z]/(2^(1/3)), {z, 1, 13}]]       
            *) 
         
            (* For Bessel I, K *)
            EtaIK[z_] := Sqrt[1+z*z] + Log[z/(1+Sqrt[1+z*z])];
            ITerms[n_, v_, x_] := Block[{z = x/v}, Sum[UK[k, 1/Sqrt[1 + z*z]]/v^k, {k, 0, n}]]  
            KTerms[n_, v_, x_] := Block[{z = x/v}, Sum[(-1)^k *UK[k, 1/Sqrt[1 + z*z]]/v^k, {k, 0, n}]]         
         
            Zed[z_] := (3/2)^(2/3) * Piecewise[{{Log[(1 + Sqrt[1 - z*z])/z] - Sqrt[1 - z*z], 
                        z >= 0 && z <= 1}, {-(Sqrt[z*z - 1] - ArcSec[z]), z >= 1 }}]^(2/3)
                        
        */

        #region Uniform Polynomials

        //

        static readonly double[] _u = {
            1.0000000000000000000000000000000000000000000000000, 
            0.069444444444444444444444444444444444444444444444444, 
            0.037133487654320987654320987654320987654320987654321, 
            0.037993059127800640146319158664837677183356195701875, 
            0.057649190412669721333130112279632169892800894172636, 
            0.11609906402551541101810925389648145325633513409767, 
            0.29159139923075051146909384369833883514611949188882, 
            0.87766696951001691646550666843329367642195093094315, 
            3.0794530301731669933624808626800113195291021379099, 
            12.341573332345238706423399383302452772865861500235, 
            55.622785365917082781033237498356193399930167455918, 
            278.46508077760256720555149833457361973576150752868, 
            1533.1694320127956159685283305295910984757146890208, 
            9207.2065997264146980332240875072986800555472937882, 
            59892.513565879068625995883275580711751115301195803, 
            419524.87511655106866264708979608155962702523476504, 
            3.1482574178668263789831459125756294123052371133193e6
        };

        static readonly double[] _v = { 
            1.0000000000000000000000000000000000000000000000000, 
            -0.097222222222222222222222222222222222222222222222222, 
            -0.043885030864197530864197530864197530864197530864198, 
            -0.042462830789894833104709647919524462734339277549154, 
            -0.062662163492032305796880556825687141187827058883300, 
            -0.12410589602727509453659954726865258796366859162165, 
            -0.30825376490107911212447063476681534001161203428247, 
            -0.92047999241294457092723870103979580697911926903794, 
            -3.2104935846486209079736502610919266948282128671827, 
            -12.807293080735625072703527661917639669955139292696, 
            -57.508303513914272027847923515249623684673562962899, 
            -287.03323710922110773495308289871434649686186160649, 
            -1576.3573033370997178267967342064809885736221450495, 
            -9446.3548230959319629172039339360596847323147559645, 
            -61335.706663852058231441567209932054202949404839075, 
            -428952.40040006907020562792327464519018044153217549, 
            -3.2145365214008648290670016159982742420379789472839e6  
                                       };


        // In J{v}(vz), Y{v}(vz)  
        // Constants α and β for z = 1, (ζ = 0)
        // See: http://dlmf.nist.gov/10.20#E14

        /// <summary>
        /// Taylor series expansions for A{k}(z) at z = 1 
        /// Each term is (z-1)^n
        /// </summary>
        static readonly double[][] _AlphaSeries = { 
            new double[] {   
                1.0000000000000000000000000000000000000000000000000 }, 
            new double[] { 
                -0.0044444444444444444444444444444444444444444444444444,
                +0.0018441558441558441558441558441558441558441558441558, 
                +0.00056812076812076812076812076812076812076812076812077, 
                -0.0016813786566167518548470929423310375691328072280453, 
                +0.0018674404213900012219339950432387407177323143709698, 
                -0.0016133010583374782643006679032572643605573523952359, 
                +0.0012317731222062581655860753783814555172540152816155, 
                -0.00087334711007377573881689318421280024059519213355408, 
                +0.00059004942455353250141217015409684268045490308795144, 
                -0.00038616989873221979829392265635684478687183288853014, 
                +0.00024794544225784284431941508455043330534024597524753, 
                -0.00015802419359239339493799568207679894597476774864587,
                +0.00010124128487612110516199281586128190750703568857334, 
                -0.000066145687953434649795420016368116485731459369481659 },
            new double[] {
                +0.00069373554135458897363659268421173183077944982706887,
                -0.00046448349036584330701977760801290213054918937271878,
                -0.00028903625460559813248257046829107232215844081643033, 
                +0.00087476494395371263857449754810648485857360830351976, 
                -0.0010297163761398656299685846793504779381329571477054, 
                +0.00083685732971381060058471403164763639264945384940170, 
                -0.00048891089352721895499827012454030539779282804920825,
                +0.00014423674794081722050225681015057792248143538536487, 
                +0.00011436380098616347803857646032495913913733703559486, 
                -0.00026680688149277753622394480711659196539290615932483, 
                +0.00032845981205589473057439332033785402133115334021839, 
                -0.00032735932052857718636914344098499087626484706066838, 
                +0.00029072393543284409224182966397372947624640413539037,
                -0.00023926784358727714839051969068579763976787388206879 },
            new double[] {
                -0.00035421197145774384077112575919506098985298072340297,
                +0.00031232252789031883278277488135344321296963223298975, 
                +0.00027794746538313398032961763191544738878478713933194, 
                -0.00091980304474796697705415519240049028360718957859713, 
                +0.0011476003882759776409836969063151454878767328254863, 
                -0.00086923932612362574293177204454008725625124935395774, 
                +0.00028739225728250733478528171802749346400717872130862, 
                +0.00031882205464750050408721917659171063399290519236377, 
                -0.00075004521284144245050130520965475296698109735324812,
                +0.00093355471886100622171813098871242728619849526820457,
                -0.00089672146499070714379605032656802688872822922818071,
                +0.00071630936026834071577546151492493605289143813709561, 
                -0.00047525961491208281019041183504112402521048197900970, 
                +0.00023805613305153155294887652133889476076097911819005 }, 
            new double[] {
                +0.00037819419920177291402661228437400326896773269110094,
                -0.00040494390552363233477213857527457785707567934857207, 
                -0.00045764735528936113047289344569432517829003363547313, 
                +0.0016536104422965022581316134187927675251745240974008, 
                -0.0021752751798336004971713701553868717066339830319962, 
                +0.0015200328786649073510777279553720775519887282178084, 
                +0.000018199783107736803189484380875915093543348882647822, 
                -0.0016951708210967816052848297138040717750861181173247, 
                +0.0028221398900766460490147257295947083553993708609573, 
                -0.0030727859160265886112924152126296669026011892749934, 
                +0.0025130826987311924678335196891813601433685761030243, 
                -0.0014553131987729802723421573468362876166983639707844,
                +0.00027252889480610004982322377833952110648161435662874, 
                +0.00073725270152852969256627198578617480764405394503335 },   
            new double[] {
                -0.00069114139728829416761374506757464896782544013894050,
                +0.00085995326611774383293620981576744842937081610188406, 
                +0.0011622475769790279990428420395128795741695216326465, 
                -0.0045484342364159570611427889041265790208666511552666, 
                +0.0062774494846948442213857656421453062158357496043496, 
                -0.0040043773974776713684780259991620902723974001653823, 
                -0.0018640942811169916290836710729557691370657527802284, 
                +0.0085293230668232924591219896851681658450244826507773, 
                -0.012742441795858482585536083857048882593375877186051, 
                +0.012629357171721498156027872351816116379532915759048, 
                -0.0083653561087214881910646855925128720372824247532572, 
                +0.0016975310587805585250844076574688148845379113745975, 
                +0.0050855688754117855737948691560409103218087908797438, 
                -0.010101236850169508748900661688908764468331371369146 },
            new double[] {
                +0.0019282196424877570138042301129169145882414313447620,
                -0.0027118515260404465237637006924625842339501605162814, 
                -0.0042273581247054415547358339373991333163739597573196, 
                +0.017775351844336392078323028963685139726940648542611, 
                -0.025631062713575874922776010875582602151636353341709, 
                +0.014753942079249580166447370655014140752268533430136, 
                +0.015682266755402035742513652584454592911614261304049, 
                -0.051568361229579800582085940293107852460299264369003, 
                +0.072798910772600672415052107398613928744116905237290, 
                -0.065771659577764509257152477996167909961133946578407, 
                +0.030674681743919572614554873338617843189681013722654,
                +0.019704562176245540024241448353089181487043675696112,
                -0.067146458998839738654701019529153870628066274185087, 
                +0.096209219450331923379271746234082349256111996676015 },
            new double[] {
                -0.0076260912665627355111507076446880470668261097390361
                +0.011894323410772885453952454111912373406999029270794 
                +0.020875897559856849550022450143820449879591574711109 
                -0.093663007238216137355171635121098337121180062497913 
                +0.14061261775795817183479952794374534423364268473071 
                -0.072065531729817299315196022509153251093535027763689 
                -0.13363705587509550945788926069689497513314816830316
                +0.38468543778948594824880465877881369218930575263091
                -0.52292484821577349096594152482374202243772923904609 
                +0.42593926050987347201821618993551927086695830017567 
                -0.087571964812930256009210920375675898587577653400621 
                -0.37397213919893332266683671877732438959936861337428 
                +0.77685045429695750856827155830146717777546440200925 
                -0.96235650442092745686796393726701935803051318728529 },
                                           };


        // Special Note on the Beta Series:
        // In our first series (β[0]) the error is O(|z-1|^19) while the rest are O(|z-1|^14)
        // This is possible because our divisor is v^2k, so
        // as long as |z-1|^14/v^2 < |z-1|^19 our expansion will be accurate 

        /// <summary>
        /// Taylor series expansions for B{k}(z) at z = 1 
        /// Each term is (z-1)^n
        /// Multiply by 2^(1/3) to get the true result
        /// </summary>
        static readonly double[][] _BetaSeries = { 
            new double[] {
                +0.014285714285714285714285714285714285714285714285714,
                -0.0088888888888888888888888888888888888888888888888889, 
                +0.0047149041434755720470006184291898577612863327149041, 
                -0.0022760731332159903588475017046445617874189302760731, 
                +0.00097936208412398888589364779840970317160793351269542, 
                -0.00033091364533381340104029179659431760272096406550188, 
                +0.000026205878940866907345364757037560130089007668747699, 
                +0.00010461578038466634628118892212621144917082962689297, 
                -0.00015134840156928523613119636132948258701699653989024, 
                +0.00015966506789887865390146354016988080642144058125971, 
                -0.00015197459316567528230103537602210479936732738568126, 
                +0.00013881756138977989783264192255704894080820886755133, 
                -0.00012486067782215473180055903569827903972190103010631, 
                +0.00011196019522807414850879279988033411098434370967428, 
                -0.00010068685543427229097280255025153402542872145768368, 
                +0.000091063729519665068948141160071158280247066345659508, 
                -0.000082910648568239870132945204215354031222967598503134, 
                +0.000075996776799924316024014011696249617080270477085459, 
                -0.000070102369351989384798567700809291712443388622514627, 
                //+0.000065039279703014120957611412504784437862720711030736, 
                //-0.000060653916177173480279274476807393700036219697561520 
            },

            new double[] {
                -0.0011848595848595848595848595848595848595848595848596,
                +0.0013940630797773654916512059369202226345083487940631, 
                -0.00089962897979704702393778024030124870461004914786427, 
                +0.00027534337158885925761096882176893128642249343161287, 
                +0.00018058683999872607869412829213513619829752520645642,
                -0.00041085229688450722066476865899640521648154938104358, 
                +0.00046753861968660115284517353889173174687915501480650, 
                -0.00042451481008552768394983485514167582398163186940041, 
                +0.00034043238653564053547924430715390756325460315107211, 
                -0.00025112498837330823854349973408015785168940746198414, 
                +0.00017388508335921200639210783979001745249437504404096, 
                -0.00011424819400727060263599239255535432563489150206372, 
                +0.000071609137264243820456009417385995000004535862211012, 
                -0.000042875109691974690108594063411495643622788357453047 },
            new double[] {
                0.00043829180944898810992616936046939627319147548291838,
                -0.00071104865116708668944378042832239325651505338194829, 
                +0.00053189843480400181261485428642829542239831218304450, 
                -0.000080689685776718396863908848078492108418924228972050, 
                -0.00034991355321419082359790163657164587175821741117951, 
                +0.00058704536696930466833329374220324086584532638588975, 
                -0.00060912939254601028999767278144405269092275329620751, 
                +0.00048280039539871081646987798854411279372123523808579, 
                -0.00029469074694792571868878919633395577378495176046934, 
                +0.00011204134661358713774423365066107923317056577945763, 
                +0.000028651305568023522925054578965480388852028411435975, 
                -0.00011692296177391557671902159190300950693153809236068, 
                +0.00015833943261629966080092366870695317377401259636379, 
                -0.00016533949148075310994813106440212223549245952932814 },
            new double[] {
                -0.00037670439477105454217546617859569550967357653384891,
                +0.00075856271658798642362729830163533116615446162320337, 
                -0.00063789421185390046960569186831654428563164035744521, 
                +5.7775181168337600010166047546441897573393248832105e-6, 
                +0.00073943125515169979903405263967081830045971245228123, 
                -0.0011893506892852910475766599888223510093935021798103, 
                +0.0011778995175001847355442853432383160159940568610989, 
                -0.00078949994515685633885463784840010767937955718260765,
                +0.00023408280411753729779633109683037809446093622972086, 
                +0.00028329528420949977447886785883212946165919482903860, 
                -0.00063525380784857947379459634800432021366165917976966, 
                +0.00078427845169916360637990553437547219538853979010558, 
                -0.00075871769126914062504480877034882008933403361224838, 
                +0.00061852622456107130302896274117804977271349426542939 },
            new double[] {
                0.00058453330122076187253348662233918429639799076420334,
                -0.0013854690422372401251263778179695254214071429065032, 
                +0.0012839444545206410400817443986202944028843588418951, 
                +0.00016070389232325420684168662236870394425246228266957, 
                -0.0021809342421313548481588806075344413746542481700811, 
                +0.0035082509708901787429721363730913910414196790724518, 
                -0.0033397443467970621269960933865025996361108777261968, 
                +0.0017549666254072902265895936911112484596531689222552, 
                +0.00050515911778127904977468593275336986004423596417714, 
                -0.0025430378265994839082636244962116088463538114246820, 
                +0.0037250297507441804495602038841150299913269830170905, 
                -0.0038506607972645253224342110346101842706682408648178, 
                +0.0030945298515944368769245759853017143547904592787370, 
                -0.0018338097126293868691865313499302998222126568145134 },
            new double[] {
                -0.0014301070053470410656039013423513233739497013223394,
                +0.0038637811942002539406642753939015525250646244964202, 
                -0.0038914159843769090069001819012380688968116864555266, 
                -0.00098360906920762771665466256013021698467545606023606, 
                +0.0088398397072496653043812207205480294124710776193854, 
                -0.014407843225437905695400147706353981838172836976677, 
                +0.013189707750927888388567307444611897635453451715615, 
                -0.0046643748651733947710523088086310633139243179252561, 
                -0.0076072026297778421740921958354113041422877384352764, 
                +0.018339682706376427882153485081622115819850172051295, 
                -0.023340845747370340517199571773806693990921382516500, 
                +0.021170996876915225602152434706292668580212994960797, 
                -0.013179899410561258806543568924670210050114714335540, 
                +0.0024019046138333775899617830346005369537995770031849 },
            new double[] {
                0.0050684595774102577549192902896081502235338855028434,
                -0.015276738425581262990864654715461778984762483459662, 
                +0.016549751503838839461996411816402452105621115530162, 
                +0.0062048316482061770726811051486498395593760439951782, 
                -0.047576094057991689159459390748195663976079825861210, 
                +0.078959065396051064999286163368630561578384058235121, 
                -0.069407063362876661630860558033277282174660954539573, 
                +0.010496625864914699794551600404801573968642618654220, 
                +0.075499742340072789203208951002448845268090167287513, 
                -0.14844963232991028437690786389087352268357424690865, 
                +0.17298072706056401304147962535224434592519135909542, 
                -0.13592490308840396268704340134274432998305136659877, 
                +0.050224810650449937047357268580473345962469669873521, 
                +0.053700520280083572050469109550734108445391228739183 },                    
            new double[] {
                -0.024553138744039611407796053629461134002645942202905,
                +0.081295879596690061226811205895992467917120072520515,
                -0.093979999636200616248811959745913778308183041090716, 
                -0.046282586933943799823536088292470469998327537513996, 
                +0.32942203664762067803364513596607595610853121134285, 
                -0.55778791255476907068403450104635651723347714366935, 
                +0.46974347266105459406007688944492209752563510636077, 
                +0.040164063801680916984631768411731604854400802036370, 
                -0.79659927402323771157006374681075821435570740180570, 
                +1.4184579172914343005554842426805733846494511396922, 
                -1.5361389357875934599583137040905420241938220942514, 
                +1.0012281809041233339826419310971228281211566227489, 
                +0.035058689554120455861110945625464624704857424798293, 
                -1.2011523207275030420959752897247614125610036521468 },                    
                                                 };

        /// <summary>
        /// Taylor series expansions ζ(z) at z = 1 
        /// <para>ζ(z) = Sum[ _Zeta[n]*(z-1)^n, {n, 0, 20} ] * (z-1) * 2^(1/3)</para>
        /// </summary>
        static readonly double[] _Zeta = { 
            -1,
            +0.30000000000000000000000000000000000000000000000000, 
            -0.18285714285714285714285714285714285714285714285714, 
            +0.13168253968253968253968253968253968253968253968254, 
            -0.10263648732220160791589363017934446505875077303649, 
            +0.083878638187209615781044352472923901495330066758638, 
            -0.070774259649144002885499484138939921252846422914450, 
            +0.061115058767065489754565384817485657821792275573788, 
            -0.053710156376986476222342817784822337839717040201062, 
            +0.047859685444150986805120937951812637323914313888046, 
            -0.043125314546582832239440459856812221596132911700368, 
            +0.039218637585552108986527074641881718873211965241382, 
            -0.035942245341677550338820654544596284244249256673637, 
            +0.033156552405590551548165539233847883886620940049184, 
            -0.030760133288870080519630166241741195030019804684998, 
            +0.028677558817834084829323253833645150449129519374296, 
            -0.026851597139977742796166036657971892740470899203874, 
            +0.025238057317473768648924511947956593622542255977258, 
            -0.023802288152328606394882471637180036660245247651511, 
            +0.022516744802656503307802086825921837728786995187258 
                                         };

        #endregion

        /// <summary>
        /// Returns true if the Asymptotic expansions for I, K are available
        /// <para>Currently v &gt;= 10000</para>
        /// </summary>
        /// <param name="v"></param>
        /// <param name="x"></param>
        /// <returns></returns>
        public static bool IsIKAvailable(double v, double x)
        {
            // Uniform expansions for I, K are less accurate than the usual methods, 
            // hence the high limit. 
            // These routines are here to prevent excessive recurrence computations for large orders.
            const double LowerLimit = 10000;
            return (v >= LowerLimit );
        }

        /// <summary>
        /// Compute Eta(z) = Sqrt(1+z^2) + Ln(z/(1+Sqrt(1+z^2)))
        /// </summary>
        /// <param name="z"></param>
        /// <returns></returns>
        static double Eta(double z)
        {
            const double _EtaRoot = 0.66274341934918158097474209710925290705623354911502;
            const double _EtaRootA = 186545688526451.0 / 281474976710656; //(2^48)
            const double _EtaRootB = 1.4514452558032047695887273761272400224175203925350e-15;

            // Near the root (0.66...), eta looses accuracy due to cancellation errors.
            // Using a Taylor series with too many terms decreases the accuracy.
            const double seriesLimit = 0.0625;
            double eta;
            if (Math.Abs(z - _EtaRoot) < seriesLimit) {
                double z0 = ((z - _EtaRootA) - _EtaRootB);
                const double c0 = 1.8101705806989772745128292123963939007951384946437;
                const double c1 = -0.94888641625683705149818526451821796205185232500224;
                const double c2 = +1.1001528948506503179440661587484778717166431789723;
                const double c3 = -1.2953006779860538264142050880707202859402187867266;
                const double c4 = +1.5715455665619724959435872642731830607659160450523;
                const double c5 = -1.9710295801345065656949668469833044182467820827032;
                const double c6 = +2.5442226725502084901295217271988232213560623535284;
                const double c7 = -3.3574176889619281023785574107440242212823285907017;
                const double c8 = +4.5036397450391532152051474799146185174846625316742;
                const double c9 = -6.1169161541708536195404828849765666129124904497594;
                const double c10 = +8.3911147120913043560677136092998763788937433759908;
                const double c11 = -11.606012767320622318463418907498594259305189351374;
                const double c12 = +16.164725435894190674344136397643034548245341234450;

                eta = z0*(c0 + z0 * (c1 + z0 * (c2 + z0 * (c3 + z0 * (c4 + z0 * (c5 + z0 * (c6 + z0 * (c7 + z0 * (c8 + z0 * (c9 + z0 * ( c10 + z0 * (c11 + z0 * c12))))))))))));
            } else {
                var w = Math.Sqrt(1 + z * z);
                eta = w + Math.Log(z / (1 + w));
            }

            return eta;
        }

        /// <summary>
        /// Uniform asyptotic expansion for BesselI
        /// </summary>
        /// <param name="v"></param>
        /// <param name="x"></param>
        /// <returns></returns>
        /// <remarks>
        /// An implementation of: http://dlmf.nist.gov/10.41#ii 
        /// </remarks>
        public static double I(double v, double x)
        {
            double z = x / v;
            double w2 = (1 + z * z);
            double w = Math.Sqrt(w2);

            var eta = Eta(z);
            
            double p = 1 / w;
            double p2 = 1 / w2;

            // Compute sum = Σ U{k}(p)/v^k, k={0,Inf}

            double m = p / v;
            double mn = 1;
            double sum = 1;
            bool ok = false;
            for (int k = 1; k < Debye.U.Length; k++) {
                double lastSum = sum;

                mn *= m;
                double term = Polynomial.Eval(Debye.U[k], p2) * mn;
                sum += term;

                if (sum == lastSum) {
                    ok = true;
                    break;
                }
            }

            if (!ok) {
                Policies.ReportConvergenceError("I({0}, {1}): z = {2}, eta = {3}, sum = {4}", v, x, z, eta, sum);
                return double.NaN;
            }

            // Now, put everything together

            double etav = eta * v;
            double prefix = (Constants.RecipSqrt2PI / Math.Sqrt(v * w));
            if (etav > DoubleLimits.MinLogValue && etav < DoubleLimits.MaxLogValue) {
                return prefix * sum * Math.Exp(etav);
            } else if (etav > 2 * DoubleLimits.MinLogValue && etav < 2 * DoubleLimits.MaxLogValue) {
                double e = Math.Exp(etav / 2);
                return (prefix * sum * e) * e;
            } 

            // use logs
            double value = Math.Exp(etav + Math.Log(prefix * sum));
            return value;

        }

        /// <summary>
        /// Uniform asymptotic expansion for BesselK
        /// </summary>
        /// <param name="v"></param>
        /// <param name="x"></param>
        /// <returns></returns>
        /// <remarks>
        /// An implementation of: http://dlmf.nist.gov/10.41#ii
        /// </remarks>
        public static double K(double v, double x)
        {
            double z = x / v;
            double w2 = (1 + z * z);
            double w = Math.Sqrt(w2);

            var eta = Eta(z);

            double p = 1 / w;
            double p2 = 1 / w2;

            // Compute sum = Σ (-1)^k * U{k}(p)/v^k, k={0,Inf}
            double m = -p / v; // -1/Sqrt(x^2+v^2)
            double mn = 1;
            double sum = 1;
            bool ok = false;
            for (int k = 1; k < Debye.U.Length; k++) {
                double lastSum = sum;

                mn *= m;
                double term = Polynomial.Eval(Debye.U[k], p2) * mn;
                sum += term;

                if (sum == lastSum) {
                    ok = true;
                    break;
                }
            }

            if (!ok) {
                Policies.ReportConvergenceError("K({0}, {1}): z = {2}, eta = {3}, sum = {4}", v, x, z, eta, sum);
                return double.NaN;
            }

            // Now, put everything together

            double etav = -eta * v;
            double prefix = Constants.SqrtHalfPI / Math.Sqrt(v * w);
            if (etav > DoubleLimits.MinLogValue && etav < DoubleLimits.MaxLogValue) {
                return prefix * sum * Math.Exp(etav);
            } else if (etav > 2 * DoubleLimits.MinLogValue && etav < 2 * DoubleLimits.MaxLogValue) {
                double e = Math.Exp(etav / 2);
                return (prefix * sum * e) * e;
            }

            // use logs
            double value = Math.Exp(etav - Math.Log(prefix * sum));
            return value;
        }

        /// <summary>
        /// Returns true if the Asymptotic expansions for J, Y are available
        /// <para>Currently v &gt; 115 and |v-x| &lt; 3/2^(1/3) * Cbrt(v)</para>
        /// </summary>
        /// <param name="v"></param>
        /// <param name="x"></param>
        /// <returns></returns>
        public static bool IsJYPrecise(double v, double x)
        {
            // Given z = x/v, compute J{v}(vz) and Y{v}(vz)
            // The tradeoffs are as follows:
            // * Our biggest source of errors is in the computation of the Airy routines,
            // especially for large negative argument.
            // * Secondly, there are errors in the computation of the Debye polynomials, so
            // they're computed (near z == 1) using a Taylor expansion.

            // In particular:
            // * For x > v, our Airy routines start to loose accuracy for argument especially for arguments < -3. 
            // So try to get |ζ(z) * v^2/3| < AiryMax 
            // Using a first order approximation: ζ(z) = 2^(1/3) * (z-1) = 2^(1/3) * (x-v)/v, so
            // |x-v| < AiryMax/2^(1/3) * Cbrt(v) 
            // Note that to meet our Taylor series range restriction:
            // v^(2/3) > AiryMax/(TaylorMax * 2^(1/3)), where TaylorMax = max(|z-1|) 

            const double JYMinV = 115; // The lowest order for which the JY uniform asymptotics will work
            const double AiryMax = 3; // range of +/- 11.6 @ JYMinV=115
            return (v >= JYMinV && Math.Abs(x - v) < (AiryMax/Constants.Cbrt2) * Math2.Cbrt(v));
        }

        /// <summary>
        /// Returns J{v}(x) and Y{v}(x) using a uniform asymptotic expansion
        /// </summary>
        /// <param name="v"></param>
        /// <param name="x"></param>
        /// <returns></returns>
        /// <remarks>
        /// An implementation of http://dlmf.nist.gov/10.20#i and 
        /// Numerical Algorithms for Uniform Airy-type Asymptotic Expansions, N. M. Temme, 1997
        /// http://oai.cwi.nl/oai/asset/2178/2178A.pdf        
        /// </remarks>
        public static (double J, double Y) JY(double v, double x)
        {
            double z = x / v;
            double zm1 = (x - v) / v; //z-1;
            double w2 = Math.Abs(zm1 * (z + 1)); // (z^2-1) or (1-z^2)
            double w = Math.Sqrt(w2);  // sqrt(1-z^2) or sqrt(z^2-1) 


            double zeta, sqrtZeta;
            double aSeries = 0, bSeries = 0;

            // if z ~= 1, use the limit form of the expansion
            const double SeriesLimit = 0.150; // eps^(1/19)
            if (Math.Abs(zm1) <= SeriesLimit) { 

                // We need a taylor series to compute the debye polynomials
                // and zeta accurately.
                zeta = Constants.Cbrt2 * Polynomial.Eval(_Zeta, zm1) * zm1;
                sqrtZeta = Math.Sqrt(Math.Abs(zeta));

                Debug.Assert(_AlphaSeries.Length == _BetaSeries.Length);

                double v2 = v * v;
                double v2k = 1;
                for (int k = 0; k < _AlphaSeries.Length; k++) {

                    double aTerm = Polynomial.Eval(_AlphaSeries[k], zm1);
                    double bTerm = Constants.Cbrt2 * Polynomial.Eval(_BetaSeries[k], zm1);

                    double aSeriesLast = aSeries;
                    double bSeriesLast = bSeries;

                    aSeries += aTerm / v2k;
                    bSeries += bTerm / v2k;

                    if (aSeries == aSeriesLast && bSeries == bSeriesLast)
                        break;

                    v2k *= v2;
                }


            } else {

                // Otherwise use the standard form

                // Compute zeta
                // (0 <= z < 1):  ζ* = 2/3 * ζ ^ (3/2) = ln((1 + sqrt(1-z*z))/z) - sqrt(1-z*z)  : (ζ > 0)
                // (z = 1):       ζ* = ζ = 0
                // (z > 1):       ζ* = 2/3 * (-ζ) ^ (3/2) = sqrt(z*z-1) - arcsec(z)             : (ζ < 0)

                double rz2m1 = 1 / w2;              // 1/|1-z^2|

                double zetaStar;
                if (z > 1) {
                    zetaStar = w - Math.Acos(1 / z);
                    rz2m1 = -rz2m1;
                } else if (z == 1) {
                    zetaStar = 0;
                } else {
                    zetaStar = -(w + Math2.Log1p(-2 * w / (1 + w)) / 2);
                }

                sqrtZeta = Math2.Cbrt(1.5 * zetaStar);
                zeta = sqrtZeta * sqrtZeta;
                if (z > 1)
                    zeta = -zeta;


                // Cache the results of U{k}(|(1-z^2)|^(-1/2)] to be used for alpha and beta
                double[] U = new double[Debye.U.Length];
                U[0] = 1;
                double div = 1;
                for (int k = 1; k < U.Length; k++) {
                    div *= w;
                    U[k] = Polynomial.Eval(Debye.U[k], rz2m1) / div;
                }

                // Compute: 
                // a{k} = Σ ( (3/2)^j * v{j} * ζ^(-3j/2) * U{2k-j}((1-z^2)^(-1/2))) j=0..2k
                // b{k} = -ζ^(-1/2) * Σ ( (3/2)^j * u{j} * ζ^(-3j/2) * U{2k-j+1}((1-z^2)^(-1/2))) j=0..2k+1

                // In J{v}(vz), Y{v}(vz)  
                // Constants α and β for z = 1, (ζ = 0)

                // For z > 1, in the following section, we need to account for the imaginary terms:
                // Debye polynomials: i^n * U[n]
                // A and B eqns: i^(3j)
                // So, A series: mult = i^(3j + (2k-j)) = (-1)^(j+k)
                // And, B series: mult = i^(3j + (2k-j+1))*i = (-1)^(j+k+1)
                // For the final B term, j= 2k+1, so mult= (-1)^k


                double v2n = 1;
                double i2 = (z > 1) ? -1 : 1;
                for (int k = 0; k < 7; k++) {
                    double zeta_n = 1;
                    double ak = 0, bk = 0;

                    double mult = Math2.IsOdd(k) ? i2 : 1;
                    for (int j = 0; j <= 2 * k; j++) {
                        Debug.Assert(mult == ((z > 1 && Math2.IsOdd(j + k)) ? -1 : 1));
                        ak += mult * _v[j] * U[2 * k - j] / zeta_n;

                        mult *= i2;
                        Debug.Assert(mult == ((z > 1 && Math2.IsOdd(j + k + 1)) ? -1 : 1));
                        bk += mult * _u[j] * U[2 * k - j + 1] / zeta_n;

                        zeta_n *= zetaStar;
                    }
                    mult = (z > 1 && Math2.IsOdd(k)) ? -1 : 1;
                    bk += mult * _u[2 * k + 1] * U[0] / zeta_n;
                    bk /= -sqrtZeta;

                    double aSeriesLast = aSeries;
                    double bSeriesLast = bSeries;

                    aSeries += ak / v2n;
                    bSeries += bk / v2n;

                    if (aSeries == aSeriesLast && bSeries == bSeriesLast)
                        break;

                    v2n *= v * v;
                }
            }


            double cbrtV = Math2.Cbrt(v);
            double v4third = v * cbrtV;
            double v2thirdZeta = cbrtV * cbrtV * zeta;

            // Φ(z) = (4*ζ(z)/(1-z*z))^(1/4); Φ(1) = 2^(1/3)
            double phi = (z == 1) ? Constants.Cbrt2 : Math.Sqrt((2 * sqrtZeta) / w);
            double J = (phi / cbrtV) * (Math2.AiryAi(v2thirdZeta) * aSeries + Math2.AiryAiPrime(v2thirdZeta) / v4third * bSeries);
            double Y = -(phi / cbrtV) * (Math2.AiryBi(v2thirdZeta) * aSeries + Math2.AiryBiPrime(v2thirdZeta) / v4third * bSeries);


            return (J, Y);
        }

    };




}